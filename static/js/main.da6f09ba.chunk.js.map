{"version":3,"sources":["logo.svg","components/Header.jsx","components/Landing.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","navBar","backgroundColor","menuButton","marginRight","spacing","DenseAppBar","classes","AppBar","className","Toolbar","variant","IconButton","edge","aria-label","Typography","color","Copyright","align","Link","href","Date","getFullYear","display","flexDirection","minHeight","main","marginTop","marginBottom","footer","padding","StickyFooter","CssBaseline","Container","component","maxWidth","gutterBottom","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,sMCQrCC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACtCC,KAAM,CACLC,SAAU,GAEXC,OAAQ,CACPC,gBAAgB,WAEjBC,WAAY,CACXC,YAAaN,EAAMO,QAAQ,OAKd,SAASC,IACvB,IAAMC,EAAUX,IAEhB,OACC,oCACC,kBAACY,EAAA,EAAD,CAAQC,UAAWF,EAAQN,QAC1B,kBAACS,EAAA,EAAD,CAASC,QAAQ,SAChB,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQJ,UAAWF,EAAQJ,WAAYW,aAAW,QAClE,kBAAC,IAAD,OAED,kBAACC,EAAA,EAAD,CAAYJ,QAAQ,KAAKK,MAAM,WAA/B,gBCrBL,SAASC,IACR,OACC,kBAACF,EAAA,EAAD,CAAYJ,QAAQ,QAAQK,MAAM,gBAAgBE,MAAM,UACtD,kBACD,kBAACC,EAAA,EAAD,CAAMH,MAAM,UAAUI,KAAK,4BAA3B,qBAEQ,KACP,IAAIC,MAAOC,cACX,KAKJ,IAAM1B,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACtCC,KAAM,CACLwB,QAAS,OACTC,cAAe,SACfC,UAAW,SAEZC,KAAM,CACLC,UAAW7B,EAAMO,QAAQ,GACzBuB,aAAc9B,EAAMO,QAAQ,IAE7BwB,OAAQ,CACPC,QAAShC,EAAMO,QAAQ,GACvBsB,UAAW,OACXzB,gBAAiB,YAIJ,SAAS6B,IACvB,IAAMxB,EAAUX,IAEhB,OACC,yBAAKa,UAAWF,EAAQR,MACvB,kBAACiC,EAAA,EAAD,MACA,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,UAAU,OAAOzB,UAAWF,EAAQmB,KAAMS,SAAS,MAC7D,kBAACpB,EAAA,EAAD,CAAYJ,QAAQ,KAAKuB,UAAU,KAAKE,cAAY,GAApD,sBAGA,kBAACrB,EAAA,EAAD,CAAYJ,QAAQ,KAAKuB,UAAU,KAAKE,cAAY,GAClD,0BACA,+CAEF,kBAACrB,EAAA,EAAD,CAAYJ,QAAQ,SAApB,yBAED,4BAAQF,UAAWF,EAAQsB,QAC1B,kBAACI,EAAA,EAAD,CAAWE,SAAS,MACnB,kBAACpB,EAAA,EAAD,CAAYJ,QAAQ,SAApB,qEAEA,kBAACM,EAAD,SChDUoB,MARf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,QCIc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.da6f09ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n\troot: {\n\t\tflexGrow: 1,\n\t},\n\tnavBar: {\n\t\tbackgroundColor:\"#1ebea5\"\n\t},\n\tmenuButton: {\n\t\tmarginRight: theme.spacing(2),\n\t},\n\n}));\n\nexport default function DenseAppBar() {\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<>\n\t\t\t<AppBar className={classes.navBar}>\n\t\t\t\t<Toolbar variant=\"dense\">\n\t\t\t\t\t<IconButton edge=\"start\" className={classes.menuButton} aria-label=\"menu\">\n\t\t\t\t\t\t<MenuIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t\t<Typography variant=\"h6\" color=\"inherit\">\n\t\t\t\t\t\tMedicinas\n\t\t\t\t\t</Typography>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\t\t</>\n\t);\n};\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Header from \"./Header\";\n\n\nfunction Copyright() {\n\treturn (\n\t\t<Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n\t\t\t{'Copyright Â© '}\n\t\t\t<Link color=\"inherit\" href=\"https://material-ui.com/\">\n\t\t\t\tMedicinas project\n\t\t\t</Link>{' '}\n\t\t\t{new Date().getFullYear()}\n\t\t\t{'.'}\n\t\t</Typography>\n\t);\n}\n\nconst useStyles = makeStyles(theme => ({\n\troot: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tminHeight: '100vh',\n\t},\n\tmain: {\n\t\tmarginTop: theme.spacing(8),\n\t\tmarginBottom: theme.spacing(2),\n\t},\n\tfooter: {\n\t\tpadding: theme.spacing(2),\n\t\tmarginTop: 'auto',\n\t\tbackgroundColor: 'white',\n\t},\n}));\n\nexport default function StickyFooter() {\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<CssBaseline />\n\t\t\t<Header/>\n\t\t\t<Container component=\"main\" className={classes.main} maxWidth=\"sm\">\n\t\t\t\t<Typography variant=\"h2\" component=\"h1\" gutterBottom>\n\t\t\t\t\tProyecto medicinas\n\t\t\t\t</Typography>\n\t\t\t\t<Typography variant=\"h5\" component=\"h2\" gutterBottom>\n\t\t\t\t\t{'Disculpe las molestias.'}\n\t\t\t\t\t{'Estamos trabajando en democratizar su salud'}\n\t\t\t\t</Typography>\n\t\t\t\t<Typography variant=\"body1\">En serio. Disculpas.</Typography>\n\t\t\t</Container>\n\t\t\t<footer className={classes.footer}>\n\t\t\t\t<Container maxWidth=\"sm\">\n\t\t\t\t\t<Typography variant=\"body1\">Medicinas es un proyecto open source completamente independiente.\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Copyright />\n\t\t\t\t</Container>\n\t\t\t</footer>\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Landing from \"./components/Landing\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Landing/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}